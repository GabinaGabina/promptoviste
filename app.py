import streamlit as st
import json
import os
from datetime import datetime
from collections import defaultdict

# Nastaven√≠ str√°nky
st.set_page_config(
    page_title="Promptovi≈°tƒõ",
    page_icon="ü§ñ",
    layout="wide"
)

# Soubor pro ukl√°d√°n√≠ dat
DATA_FILE = "prompty.json"

# Funkce pro naƒçten√≠ dat
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

# Funkce pro ulo≈æen√≠ dat
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# Funkce pro export dat
def export_to_json():
    data = load_data()
    return json.dumps(data, ensure_ascii=False, indent=2)

# Inicializace session state
if 'prompts' not in st.session_state:
    st.session_state.prompts = load_data()
if 'admin_logged_in' not in st.session_state:
    st.session_state.admin_logged_in = False

prompts = st.session_state.prompts

# Hlaviƒçka
st.title("ü§ñ Promptovi≈°tƒõ")
st.markdown("*Sd√≠len√° kolekce u≈æiteƒçn√Ωch prompt≈Ø pro vzdƒõl√°v√°n√≠, marketing a dal≈°√≠ oblasti*")

# Admin login v postrann√≠m panelu
with st.sidebar:
    st.header("Admin p≈ô√≠stup")
    if not st.session_state.admin_logged_in:
        admin_password = st.text_input("Heslo", type="password", key="admin_pass")
        if st.button("P≈ôihl√°sit"):
            if admin_password == "promptmaster":
                st.session_state.admin_logged_in = True
                st.rerun()
            else:
                st.error("Nespr√°vn√© heslo")
    else:
        st.success("P≈ôihl√°≈°en jako admin")
        if st.button("Odhl√°sit"):
            st.session_state.admin_logged_in = False
            st.rerun()

st.markdown("---")

# Rozdƒõlen√≠ na z√°lo≈æky
if st.session_state.admin_logged_in:
    tab1, tab2, tab3, tab4 = st.tabs(["üìö Proch√°zet prompty", "üìÇ Kategorie & Tagy", "‚ûï P≈ôidat prompt", "‚ÑπÔ∏è O projektu"])
else:
    tab1, tab2, tab3 = st.tabs(["üìö Proch√°zet prompty", "üìÇ Kategorie & Tagy", "‚ÑπÔ∏è O projektu"])

# Z√°lo≈æka 1: Proch√°zet prompty
with tab1:
    st.header("Datab√°ze prompt≈Ø")
    
    # Export tlaƒç√≠tko
    if prompts:
        col_export, col_space = st.columns([1, 5])
        with col_export:
            st.download_button(
                label="üíæ Export do JSON",
                data=export_to_json(),
                file_name=f"prompty_export_{datetime.now().strftime('%Y%m%d')}.json",
                mime="application/json"
            )
    
    # Vyhled√°v√°n√≠
    col1, col2 = st.columns([3, 1])
    with col1:
        search = st.text_input("üîç Vyhledat v promptech", placeholder="Zadej kl√≠ƒçov√© slovo...")
    
    # Z√≠sk√°n√≠ v≈°ech unik√°tn√≠ch kategori√≠
    all_categories = list(set([p.get('kategorie', 'Bez kategorie') for p in prompts]))
    all_categories.sort()
    
    with col2:
        category_filter = st.selectbox("Kategorie", ["V≈°echny"] + all_categories)
    
    # Filtrov√°n√≠ prompt≈Ø
    filtered_prompts = prompts
    
    if search:
        filtered_prompts = [p for p in filtered_prompts 
                          if search.lower() in p['nazev'].lower() 
                          or search.lower() in p['text'].lower()
                          or search.lower() in p.get('popis', '').lower()]
    
    if category_filter != "V≈°echny":
        filtered_prompts = [p for p in filtered_prompts 
                          if p.get('kategorie') == category_filter]
    
    # Zobrazen√≠ prompt≈Ø
    st.markdown(f"**Zobrazeno {len(filtered_prompts)} z {len(prompts)} prompt≈Ø**")
    st.markdown("")
    
    if not filtered_prompts:
        st.info("üîç ≈Ω√°dn√© prompty nenalezeny. Zkus zmƒõnit vyhled√°v√°n√≠ nebo filtr.")
    else:
        for i, prompt in enumerate(filtered_prompts):
            # Najdeme index v p≈Øvodn√≠m seznamu
            prompt_index = prompts.index(prompt)
            
            with st.expander(f"**{prompt['nazev']}** ‚Ä¢ {prompt.get('kategorie', 'Bez kategorie')}"):
                if prompt.get('popis'):
                    st.markdown(f"*{prompt['popis']}*")
                    st.markdown("")
                
                st.markdown("**Prompt:**")
                st.code(prompt['text'], language=None)
                
                if prompt.get('tagy'):
                    st.markdown(f"üè∑Ô∏è **Tagy:** {', '.join(prompt['tagy'])}")
                
                # Tlaƒç√≠tka - zobraz√≠ se podle toho, jestli je admin p≈ôihl√°≈°en
                if st.session_state.admin_logged_in:
                    col1, col2, col3, col4 = st.columns([1, 1, 1, 3])
                    
                    with col1:
                        if st.button("üìã Kop√≠rovat", key=f"copy_{prompt_index}"):
                            st.success("‚úÖ Zkop√≠rov√°no!")
                    
                    with col2:
                        if st.button("‚úèÔ∏è Editovat", key=f"edit_{prompt_index}"):
                            st.session_state[f'editing_{prompt_index}'] = True
                            st.rerun()
                    
                    with col3:
                        if st.button("üóëÔ∏è Smazat", key=f"delete_{prompt_index}"):
                            st.session_state[f'confirm_delete_{prompt_index}'] = True
                            st.rerun()
                    
                    # Potvrzen√≠ smaz√°n√≠
                    if st.session_state.get(f'confirm_delete_{prompt_index}', False):
                        st.warning("‚ö†Ô∏è Opravdu chce≈° smazat tento prompt?")
                        col_yes, col_no = st.columns(2)
                        with col_yes:
                            if st.button("‚úÖ Ano, smazat", key=f"confirm_yes_{prompt_index}"):
                                st.session_state.prompts.pop(prompt_index)
                                save_data(st.session_state.prompts)
                                st.session_state[f'confirm_delete_{prompt_index}'] = False
                                st.success("üóëÔ∏è Prompt byl smaz√°n!")
                                st.rerun()
                        with col_no:
                            if st.button("‚ùå Ne, zru≈°it", key=f"confirm_no_{prompt_index}"):
                                st.session_state[f'confirm_delete_{prompt_index}'] = False
                                st.rerun()
                    
                    # Editaƒçn√≠ formul√°≈ô
                    if st.session_state.get(f'editing_{prompt_index}', False):
                        st.markdown("---")
                        st.markdown("**‚úèÔ∏è Editovat prompt:**")
                        
                        with st.form(f"edit_form_{prompt_index}"):
                            new_nazev = st.text_input("N√°zev", value=prompt['nazev'])
                            new_kategorie = st.text_input("Kategorie", value=prompt.get('kategorie', ''))
                            new_popis = st.text_area("Popis", value=prompt.get('popis', ''))
                            new_text = st.text_area("Text promptu", value=prompt['text'], height=200)
                            new_tagy = st.text_input("Tagy (oddƒõlen√© ƒç√°rkou)", 
                                                    value=', '.join(prompt.get('tagy', [])))
                            
                            col_save, col_cancel = st.columns(2)
                            with col_save:
                                save_btn = st.form_submit_button("üíæ Ulo≈æit zmƒõny")
                            with col_cancel:
                                cancel_btn = st.form_submit_button("‚ùå Zru≈°it")
                            
                            if save_btn:
                                st.session_state.prompts[prompt_index] = {
                                    'nazev': new_nazev,
                                    'kategorie': new_kategorie,
                                    'popis': new_popis,
                                    'text': new_text,
                                    'tagy': [t.strip() for t in new_tagy.split(',') if t.strip()],
                                    'datum': prompt.get('datum', datetime.now().strftime("%d.%m.%Y"))
                                }
                                save_data(st.session_state.prompts)
                                st.session_state[f'editing_{prompt_index}'] = False
                                st.success("‚úÖ Zmƒõny ulo≈æeny!")
                                st.rerun()
                            
                            if cancel_btn:
                                st.session_state[f'editing_{prompt_index}'] = False
                                st.rerun()
                else:
                    # Pro bƒõ≈æn√© u≈æivatele jen tlaƒç√≠tko kop√≠rovat
                    if st.button("üìã Kop√≠rovat", key=f"copy_{prompt_index}"):
                        st.success("‚úÖ Text promptu zkop√≠rov√°n!")

# Z√°lo≈æka 2: Kategorie & Tagy
with tab2:
    st.header("üìÇ Kategorie a tagy")
    
    if not prompts:
        st.info("üì≠ Zat√≠m nejsou ≈æ√°dn√© prompty v datab√°zi.")
    else:
        # Seskupen√≠ podle kategori√≠
        categories_data = defaultdict(lambda: {'count': 0, 'tags': set(), 'prompts': []})
        
        for prompt in prompts:
            cat = prompt.get('kategorie', 'Bez kategorie')
            categories_data[cat]['count'] += 1
            categories_data[cat]['prompts'].append(prompt)
            if prompt.get('tagy'):
                categories_data[cat]['tags'].update(prompt['tagy'])
        
        # Se≈ôazen√≠ kategori√≠ podle abecedy
        sorted_categories = sorted(categories_data.keys())
        
        # Zobrazen√≠ kategori√≠
        for category in sorted_categories:
            data = categories_data[category]
            
            with st.expander(f"**{category}** ({data['count']} {'prompt' if data['count'] == 1 else 'prompty' if data['count'] < 5 else 'prompt≈Ø'})", expanded=False):
                
                # Tagy v t√©to kategorii
                if data['tags']:
                    st.markdown("**üè∑Ô∏è Pou≈æ√≠van√© tagy:**")
                    
                    # Zobrazen√≠ tag≈Ø jako tlaƒç√≠tka
                    cols = st.columns(4)
                    for idx, tag in enumerate(sorted(data['tags'])):
                        col_idx = idx % 4
                        with cols[col_idx]:
                            # Poƒçet prompt≈Ø s t√≠mto tagem v t√©to kategorii
                            tag_count = sum(1 for p in data['prompts'] if tag in p.get('tagy', []))
                            st.button(f"üè∑Ô∏è {tag} ({tag_count})", key=f"tag_{category}_{tag}", use_container_width=True)
                    
                    st.markdown("---")
                
                # Seznam prompt≈Ø v kategorii - nyn√≠ jako klikateln√© expandery
                st.markdown("**üìù Prompty:**")
                for prompt_cat in data['prompts']:
                    # Najdeme index v p≈Øvodn√≠m seznamu
                    prompt_index_cat = prompts.index(prompt_cat)
                    
                    with st.expander(f"**{prompt_cat['nazev']}**"):
                        if prompt_cat.get('popis'):
                            st.markdown(f"*{prompt_cat['popis']}*")
                            st.markdown("")
                        
                        st.markdown("**Prompt:**")
                        st.code(prompt_cat['text'], language=None)
                        
                        if prompt_cat.get('tagy'):
                            st.markdown(f"üè∑Ô∏è **Tagy:** {', '.join(prompt_cat['tagy'])}")
                        
                        # Tlaƒç√≠tko kop√≠rovat pro v≈°echny
                        if st.button("üìã Kop√≠rovat", key=f"copy_cat_{category}_{prompt_index_cat}"):
                            st.success("‚úÖ Text promptu zkop√≠rov√°n!")

# Z√°lo≈æka 3: P≈ôidat prompt (pouze pro admina)
if st.session_state.admin_logged_in:
    with tab3:
        st.header("P≈ôidat nov√Ω prompt")
        
        with st.form("add_prompt"):
            nazev = st.text_input("N√°zev promptu *", placeholder="nap≈ô. The Blindspot Cartographer")
            kategorie = st.text_input("Kategorie *", placeholder="nap≈ô. Strategick√© my≈°len√≠, Marketing...")
            popis = st.text_area("Kr√°tk√Ω popis", placeholder="Co tento prompt dƒõl√°?")
            text = st.text_area("Text promptu *", height=300, 
                              placeholder="Vlo≈æ zde cel√Ω prompt...")
            tagy = st.text_input("Tagy (oddƒõlen√© ƒç√°rkou)", 
                               placeholder="nap≈ô. strategie, anal√Ωza, kritick√© my≈°len√≠")
            
            submit = st.form_submit_button("‚ûï P≈ôidat prompt")
            
            if submit:
                if nazev and kategorie and text:
                    new_prompt = {
                        'nazev': nazev,
                        'kategorie': kategorie,
                        'popis': popis,
                        'text': text,
                        'tagy': [t.strip() for t in tagy.split(',') if t.strip()],
                        'datum': datetime.now().strftime("%d.%m.%Y")
                    }
                    st.session_state.prompts.append(new_prompt)
                    save_data(st.session_state.prompts)
                    st.success(f"‚úÖ Prompt '{nazev}' byl √∫spƒõ≈°nƒõ p≈ôid√°n!")
                    st.rerun()
                else:
                    st.error("‚ö†Ô∏è Vypl≈à pros√≠m v≈°echna povinn√° pole (oznaƒçen√° *)")

# Z√°lo≈æka O projektu
if st.session_state.admin_logged_in:
    with tab4:
        st.header("O Promptovi≈°ti")
        st.markdown("""
        **Promptovi≈°tƒõ** je sd√≠len√° datab√°ze u≈æiteƒçn√Ωch prompt≈Ø pro pr√°ci s AI.
        
        ### Jak pou≈æ√≠vat:
        1. **Proch√°zej prompty** v z√°lo≈æce "Proch√°zet prompty"
        2. **Vyhled√°vej** podle kl√≠ƒçov√Ωch slov nebo filtruj podle kategori√≠
        3. **Prohl√≠≈æej kategorie a tagy** pro inspiraci a objevov√°n√≠
        4. **Kop√≠ruj** prompty a pou≈æ√≠vej je ve sv√Ωch AI konverzac√≠ch
        5. **Exportuj** celou datab√°zi do JSON souboru pro z√°lohu
        
        ---
        *Vytvo≈ôeno s pomoc√≠ Claude & Streamlit ü§ñ*
        """)
else:
    with tab3:
        st.header("O Promptovi≈°ti")
        st.markdown("""
        **Promptovi≈°tƒõ** je sd√≠len√° datab√°ze u≈æiteƒçn√Ωch prompt≈Ø pro pr√°ci s AI.
        
        ### Jak pou≈æ√≠vat:
        1. **Proch√°zej prompty** v z√°lo≈æce "Proch√°zet prompty"
        2. **Vyhled√°vej** podle kl√≠ƒçov√Ωch slov nebo filtruj podle kategori√≠
        3. **Prohl√≠≈æej kategorie a tagy** pro inspiraci a objevov√°n√≠
        4. **Kop√≠ruj** prompty a pou≈æ√≠vej je ve sv√Ωch AI konverzac√≠ch
        
        ---
        *Vytvo≈ôeno s pomoc√≠ Claude & Streamlit ü§ñ*
        """)

# Footer
st.markdown("---")
st.markdown("*M√°≈° n√°pad na vylep≈°en√≠? Napi≈° Administr√°torovi!*")